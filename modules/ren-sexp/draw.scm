(define-module (ren-sexp draw)
  #:use-module (ice-9 match)
  #:use-module (dom document)
  #:use-module (dom canvas)
  #:use-module (dom element)
  #:use-module (dom window)
  #:use-module (ren-sexp text)
  #:use-module (ren-sexp bg)
  #:use-module (ren-sexp sprites)
  #:use-module (ren-sexp scene)
  #:use-module (ren-sexp scene-utils)
  #:use-module (ren-sexp carret)
  #:use-module (hoot numbers)
  #:use-module (hoot ffi)
  #:use-module (ren-sexp utils)
  #:export (init-draw))

(define (make-2d-context elem)
  (let* ((canvas (get-element-by-id elem))
	 (context (get-context canvas "2d"))
	 (width    1920.0)
	 (height   1080.0))
    (set-element-width! canvas (exact width))
    (set-element-height! canvas (exact height))
    context))

(define (set-font context)
  (set-fill-color! context "#ffffff")
  (set-border-color! context "black")
  (set-font! context "bold 40px Prime")
  (set-text-align! context "left")
  (set-shadow-blur! context 10)
  (set-shadow-color! context "rgba(0,0,0,0.3)"))

(define (init-draw data *state*)
  (let ((carret-context (make-2d-context "carret-canvas"))
	(bg-context (make-2d-context "all-canvas"))
	(text-context (make-2d-context "text-canvas"))
	(old-text-context (make-2d-context "old-text-canvas"))
	(GW   1920.0)
	(GH   1080.0))
    (set-font carret-context)
    (set-font text-context)
    (set-font old-text-context)
    (define *last-pos* (make-parameter 0))
    
    (define (draw prev-time)
      (let* ((current-state (*state*))
	     (scene (last current-state))
	     (text (scene-text scene))
	     (old-text (scene-old-text scene))
             (bg (scene-bg scene))
	     (sprites (scene-sprites scene))
	     (completed?
	      (current-state-completed? current-state data)))
	(unless completed?
	  (draw-bg bg bg-context GW GH)
	  (draw-sprites sprites bg-context)
	  (clear-rect old-text-context 0.0 0.0 GW GH)
	  (define p1
	    (draw-old-text (reverse old-text) old-text-context 50.0))
	  (*last-pos* p1))
	
	(clear-rect text-context 0.0 0.0 GW GH)
	(clear-rect carret-context 0.0 0.0 GW GH)
	(let* ((p2&w2 (draw-text text text-context (*last-pos*)))
	       (p2 (car p2&w2))
	       (w2 (cdr p2&w2)))
	  (unless (equal? text "")
            (draw-carret (make-carret "")
			 carret-context p2 w2 completed?)))
	(request-animation-frame draw-callback)))
    (define draw-callback (procedure->external draw))
    draw-callback))
