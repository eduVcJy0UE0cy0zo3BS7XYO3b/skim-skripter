(define-module (ren-sexp update)
  #:use-module (ice-9 match)
  #:use-module (dom window)
  #:use-module (ren-sexp text)
  #:use-module (ren-sexp bg)
  #:use-module (ren-sexp sprites)
  #:use-module (ren-sexp scene)
  #:use-module (ren-sexp carret)
  #:use-module (ren-sexp scene-utils)
  #:use-module (hoot debug)
  #:use-module (hoot ffi)
  #:use-module (ren-sexp utils)
  #:export (init-update))

(define (next-scene-increment next current)
  (match (list next current)
    ((($ <scene> state* bg* old-text*
	 text* sprites* music* carret* ttl*)
      ($ <scene> state  bg  old-text
	 text  sprites  music  carret  ttl))
     (cond
      ((not (same-bg? bg* bg))
       (next-bg next current))
      ((not (same-sprites? sprites* sprites))
       (next-sprites next current))
      ((not (same-old-text? old-text* old-text))
       (next-old-text next current))
      ((not (same-text? text* text))
       (next-string next current))
      ((and (number? ttl) (equal? ttl* (+ 1 ttl)))
       next)
      ((not (equal? ttl ttl*))
       (next-ttl next current))
      (else next)))))

(define (get-next-increment local remote state)
  (define local* (next-scene-increment remote local))
  (define state* (find-replace local local* state))
  state*)

(define (inf-ttl? scene)
  (equal? (scene-ttl scene) 'inf))

(define (compute-next-state state data)
  (let* ((local&current (local-and-remote-scene state data))
	 (local (car local&current))
	 (remote (cdr local&current)))
    (if (current-scene-completed? local remote)
	(if (inf-ttl? remote)
	    state
	    (append-empty-scene! state data (make-scene)))
	(get-next-increment local remote state))))

(define (init-update data *state* dt)
  (define (update)
    (let* ((state (*state*))
	   (scene (last state)))
      (match (scene-state scene)
	('play (*state* (compute-next-state state data)))
	(_ #t))
      (timeout update-callback dt)))
  (define update-callback
    (procedure->external update))
  update-callback)
